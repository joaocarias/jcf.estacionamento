// <auto-generated />
using System;
using Jcf.Estacionamento.Api.Data.Contextos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jcf.Estacionamento.Api.Migrations
{
    [DbContext(typeof(AppContexto))]
    [Migration("20231204005627_Estacionamento_seed")]
    partial class Estacionamento_seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Jcf.Estacionamento.Api.Models.Estacionamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataRemocao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TotalVagasCarro")
                        .HasColumnType("int");

                    b.Property<int>("TotalVagasGrandes")
                        .HasColumnType("int");

                    b.Property<int>("TotalVagasMoto")
                        .HasColumnType("int");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UsuarioCriacaoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Estacionamentos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08dbe21f-7354-4a2a-8b53-63cc10662e98"),
                            Ativo = true,
                            DataCriacao = new DateTime(2023, 12, 4, 0, 56, 27, 55, DateTimeKind.Utc).AddTicks(2043),
                            Nome = "Estacionamento Principal",
                            TotalVagasCarro = 10,
                            TotalVagasGrandes = 3,
                            TotalVagasMoto = 30
                        });
                });

            modelBuilder.Entity("Jcf.Estacionamento.Api.Models.EstacionamentoVeiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataRemocao")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EstacionamentoId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Ocupacao")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UsuarioCriacaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("VeiculoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EstacionamentoId");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("EstacionamentoVeiculo");
                });

            modelBuilder.Entity("Jcf.Estacionamento.Api.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataRemocao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UsuarioCriacaoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08dbd59a-2683-4c67-8e16-689ba2648545"),
                            Ativo = true,
                            DataCriacao = new DateTime(2023, 12, 4, 0, 56, 27, 55, DateTimeKind.Utc).AddTicks(216),
                            Email = "admin@email.com",
                            Nome = "Administrador Usuário",
                            Role = "ADMIN",
                            Senha = "4BADAEE57FED5610012A296273158F5F"
                        },
                        new
                        {
                            Id = new Guid("08dbdc08-56e1-4e90-805f-db29361e075e"),
                            Ativo = true,
                            DataCriacao = new DateTime(2023, 12, 4, 0, 56, 27, 55, DateTimeKind.Utc).AddTicks(282),
                            Email = "basico@email.com",
                            Nome = "Básico Usuário",
                            Role = "BASICO",
                            Senha = "4BADAEE57FED5610012A296273158F5F"
                        });
                });

            modelBuilder.Entity("Jcf.Estacionamento.Api.Models.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataRemocao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UsuarioCriacaoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Veiculos");
                });

            modelBuilder.Entity("Jcf.Estacionamento.Api.Models.Estacionamento", b =>
                {
                    b.HasOne("Jcf.Estacionamento.Api.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany()
                        .HasForeignKey("UsuarioAtualizacaoId");

                    b.HasOne("Jcf.Estacionamento.Api.Models.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Jcf.Estacionamento.Api.Models.EstacionamentoVeiculo", b =>
                {
                    b.HasOne("Jcf.Estacionamento.Api.Models.Estacionamento", "Estacionamento")
                        .WithMany("VagasPreenchidas")
                        .HasForeignKey("EstacionamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jcf.Estacionamento.Api.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany()
                        .HasForeignKey("UsuarioAtualizacaoId");

                    b.HasOne("Jcf.Estacionamento.Api.Models.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");

                    b.HasOne("Jcf.Estacionamento.Api.Models.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estacionamento");

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("Jcf.Estacionamento.Api.Models.Usuario", b =>
                {
                    b.HasOne("Jcf.Estacionamento.Api.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany()
                        .HasForeignKey("UsuarioAtualizacaoId");

                    b.HasOne("Jcf.Estacionamento.Api.Models.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Jcf.Estacionamento.Api.Models.Veiculo", b =>
                {
                    b.HasOne("Jcf.Estacionamento.Api.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany()
                        .HasForeignKey("UsuarioAtualizacaoId");

                    b.HasOne("Jcf.Estacionamento.Api.Models.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Jcf.Estacionamento.Api.Models.Estacionamento", b =>
                {
                    b.Navigation("VagasPreenchidas");
                });
#pragma warning restore 612, 618
        }
    }
}
